@inject StateContainer stateContainer
@inject HttpClient Http
@implements IDisposable

<h3 class="crafted">Crafted Items</h3>

@if (!stateContainer.IsDataLoaded())
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="item-info col-md-12">
        <div class="search col-md-6" style="float:left">
            <LoreSoft.Blazor.Controls.Typeahead SearchMethod="@SearchItems"
                               TValue="ItemShort"
                               TItem="ItemShort"
                               Value="SelectedItem"
                               placeholder="Enter Item base..."
                               ValueChanged="SelectedItemChanged"
                               ValueExpression="@(() => SelectedItem)">
                <SelectedTemplate Context="item">
                    @item.FullName
                </SelectedTemplate>
                <ResultTemplate Context="item">
                    @item.FullName
                </ResultTemplate>
            </LoreSoft.Blazor.Controls.Typeahead>
            <a style="color:#fff">Char Level: </a><input type="number" class="numinput" placeholder="Char Level" @bind-value="CurrentClvl" @bind-value:event="oninput" @onkeyup="CalculateItemDetails"/><br/>
            <a style="color:#fff">Item Level: </a><input type="number" class="numinput" placeholder="Item Level" @bind-value="CurrentIlvl" @bind-value:event="oninput" @onkeyup="CalculateItemDetails"/>
        </div>
        <div class="item-result col-md-6" style="float:right">
            Results:<br/>
            @if (SelectedItem == null)
            {
                <a>No item set</a><br />
            } else
            {
                <a>Item: </a>@SelectedItem.FullName<br/>
            }
            Item Level: @NewIlvl<br/>
            Affix Level: @NewAlvl<br/>
            @NumAffixes
        </div>
    </div>
    <div class="col-md-7" style="float:left;padding:1rem">
        <input type="text" placeholder="Search Crafts..." @bind="Filter" @bind:event="oninput" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Recipe</th>
                <th>Inputs</th>
                <th>Mods</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in stateContainer.DataManager.Recipes)
            {
                if (!IsVisible(recipe))
                {
                    continue;
                }
            <tr>
                <td class="crafted">@recipe.Description</td>
                <td>
                    <p class="magic">
                        Magic @recipe.ItemType<br />
                        <img src="images/@(recipe.InputTypes[1]).png" alt="@recipe.InputNames[1]" title="@recipe.InputNames[1]" />
                        <img src="images/@(recipe.InputTypes[2]).png" alt="@recipe.InputNames[2]" title="@recipe.InputNames[2]" />
                        <img src="images/@(recipe.InputTypes[0]).png" alt="@recipe.InputNames[0]" title="@recipe.InputNames[0]" />
                    </p>
                </td>
                <td class="crafted">
                    @for (int i = 0; i < recipe.Mods.Count; i++)
                    {
                        if (recipe.Mods[i].FullMod != "")
                        {
                            @recipe.Mods[i].FullMod<br/>
                        }
                    }
                </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override void OnInitialized()
    {
        stateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!stateContainer.IsDataLoaded())
        {
            stateContainer.DataFiles = new Dictionary<DataFileTypes, string>();
            string cubeMain = await Http.GetStringAsync("data/CubeMain.txt");
            stateContainer.DataFiles.Add(DataFileTypes.CubeMain, cubeMain);
            string itemStatCost = await Http.GetStringAsync("data/ItemStatCost.txt");
            stateContainer.DataFiles.Add(DataFileTypes.ItemStatCost, itemStatCost);
            string magicPrefix = await Http.GetStringAsync("data/MagicPrefix.txt");
            stateContainer.DataFiles.Add(DataFileTypes.MagicPrefix, magicPrefix);
            string magicSuffix = await Http.GetStringAsync("data/MagicSuffix.txt");
            stateContainer.DataFiles.Add(DataFileTypes.MagicSuffix, magicSuffix);
            string properties = await Http.GetStringAsync("data/Properties.txt");
            stateContainer.DataFiles.Add(DataFileTypes.Properties, properties);
            string strings = await Http.GetStringAsync("data/string.txt");
            stateContainer.DataFiles.Add(DataFileTypes.Strings, strings);
            string expStrings = await Http.GetStringAsync("data/expansionstring.txt");
            stateContainer.DataFiles.Add(DataFileTypes.ExpStrings, expStrings);
            string patchStrings = await Http.GetStringAsync("data/patchstring.txt");
            stateContainer.DataFiles.Add(DataFileTypes.PatchStrings, patchStrings);
            string itemShort = await Http.GetStringAsync("data/ItemShort.txt");
            stateContainer.DataFiles.Add(DataFileTypes.ItemShort, itemShort);
            string armors = await Http.GetStringAsync("data/Armor.txt");
            stateContainer.DataFiles.Add(DataFileTypes.Armor, armors);
            string weapons = await Http.GetStringAsync("data/Weapons.txt");
            stateContainer.DataFiles.Add(DataFileTypes.Weapons, weapons);
            string misc = await Http.GetStringAsync("data/Misc.txt");
            stateContainer.DataFiles.Add(DataFileTypes.Misc, misc);
            string itemTypes = await Http.GetStringAsync("data/ItemTypes.txt");
            stateContainer.DataFiles.Add(DataFileTypes.ItemTypes, itemTypes);
            DataManager dataManager = new DataManager(stateContainer);
            ItemEnumerable = dataManager.ItemsShort.Values;
            CurrentIlvl = 0;
            CurrentClvl = 0;
            NewIlvl = 0;
            NewAlvl = 0;
            NumAffixes = "40% chance for 1 affix, 20% chance each for 2, 3 or 4 affixes";
            stateContainer.DataManager = dataManager;
        }
    }

    public void Dispose()
    {
        stateContainer.OnChange -= StateHasChanged;
    }

    public bool IsVisible(CubeMain recipe)
    {
        if (string.IsNullOrEmpty(Filter))
        {
            return true;
        }
        if (stateContainer.DataManager.Culture.CompareInfo.IndexOf(recipe.Description, Filter, CompareOptions.IgnoreCase) >= 0)
        {
            return true;
        }
        if (stateContainer.DataManager.Culture.CompareInfo.IndexOf(recipe.ItemType, Filter, CompareOptions.IgnoreCase) >= 0)
        {
            return true;
        }
        foreach (var inputName in recipe.InputNames)
        {
            if (stateContainer.DataManager.Culture.CompareInfo.IndexOf(inputName, Filter, CompareOptions.IgnoreCase) >= 0)
            {
                return true;
            }
        }
        foreach (var mod in recipe.Mods)
        {
            if (stateContainer.DataManager.Culture.CompareInfo.IndexOf(mod.FullMod, Filter, CompareOptions.IgnoreCase) >= 0)
            {
                return true;
            }
        }
        return false;
    }

    public string Filter { get; set; }

    public IEnumerable<ItemShort> ItemEnumerable { get; set; }

    public ItemShort SelectedItem { get; set; }
    public int CurrentIlvl { get; set; }
    public int CurrentClvl { get; set; }
    public int NewIlvl { get; set; }
    public int NewAlvl { get; set; }
    public string NumAffixes { get; set; }

    public Task<IEnumerable<ItemShort>> SearchItems(string searchText)
    {
        var result = ItemEnumerable.Where(x => x.FullName.ToLower().Contains(searchText.ToLower())).ToList();
        return Task.FromResult<IEnumerable<ItemShort>>(result);
    }

    private async Task SelectedItemChanged(ItemShort itemShort)
    {
        SelectedItem = itemShort;
        CalculateItemDetails();
    }

    public void CalculateItemDetails()
    {
        bool skipAlvlCalcs = false;
        int ilvl = (int)(0.5f * CurrentClvl) + (int)(0.5f * CurrentIlvl);
        if (ilvl > 99)
        {
            ilvl = 99;
        }
        int qlvl;
        if (SelectedItem == null)
        {
            qlvl = 0;
        } else
        {
            qlvl = SelectedItem.Qlvl;
            if (SelectedItem.Mlvl.GetValueOrDefault() != 0)
            {
                NewAlvl = ilvl + SelectedItem.Mlvl.GetValueOrDefault();
                NewAlvl = Math.Min(NewAlvl, 99);
                skipAlvlCalcs = true;
            }
        }
        if (!skipAlvlCalcs)
        {
            if (qlvl > ilvl)
            {
                ilvl = qlvl;
            }
            if (ilvl < (99 - (int)(qlvl / 2)))
            {
                NewAlvl = ilvl - (int)(qlvl / 2);
            }
            else
            {
                NewAlvl = ilvl * 2 - 99;
            }
            if (NewAlvl < 0)
            {
                NewAlvl = 0;
            }
        }
        NewIlvl = ilvl;
        if (ilvl <= 30)
        {
            NumAffixes = "40% chance for 1 affix, 20% chance each for 2, 3 or 4 affixes";
        } else if (ilvl <= 50)
        {
            NumAffixes = "60% chance for 2 affixes, 20% chance each for 3 or 4 affixes";
        } else if (ilvl <= 70)
        {
            NumAffixes = "80% chance for 3 affix, 20% chance for 4 affixes";
        } else
        {
            NumAffixes = "4 affixes";
        }
    }

}